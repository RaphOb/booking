version: "3.0"
services:
    traefik:
        # Use the latest v2.2.x Traefik image available
        image: traefik:v2.2
        ports:
          # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
          - 80:80
          # Listen on port 443, default for HTTPS
          # - 8889:8080
          - 443:443
        deploy:
          # placement:
            # constraints:
          #     # Make the traefik service run only on the node with this label
          #     # as the node with it has the volume for the certificates
              # - node.labels.traefik-public.traefik-public-certificates == true
          labels:
            # Enable Traefik for this service, to make it available in the public network
            - traefik.enable=true
            # Use the traefik-public network (declared below)
            - traefik.docker.network=traefik-public
            # Use the custom label "traefik.constraint-label=traefik-public"
            # This public Traefik will only use services with this label
            # That way you can add other internal Traefik instances per stack if needed
            - traefik.constraint-label=traefik-public
            # admin-auth middleware with HTTP Basic auth
            # Using the environment variables USERNAME and HASHED_PASSWORD
            # - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME2?Variable not set}:${HASHED_PASSWORD?Variable not set}
            # https-redirect middleware to redirect HTTP to HTTPS
            # It can be re-used by other stacks in other Docker Compose files
            # - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
            # - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
            # traefik-http set up only to use the middleware to redirect to https
            # Uses the environment variable DOMAIN
            - traefik.http.routers.traefik-public-http.rule=Host(`dashboard.${DOMAIN?Variable not set}`)
            - traefik.http.routers.traefik-public-http.entrypoints=web
            # - traefik.http.routers.traefik-public-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
            # traefik-https the actual router using HTTPS
            # Uses the environment variable DOMAIN
            # - traefik.http.routers.traefik-public-https.rule=Host(`${DOMAIN?Variable not set}`)
            # - traefik.http.routers.traefik-public-https.entrypoints=websecure
            # - traefik.http.routers.traefik-public-https.tls=true
            # Use the special Traefik service api@internal with the web UI/Dashboard
            - traefik.http.routers.traefik-public-http.service=api@internal
            # Use the "le" (Let's Encrypt) resolver created below
            # - traefik.http.routers.traefik-public-https.tls.certresolver=le
            # Enable HTTP Basic auth, using the middleware created above
            # - traefik.http.routers.traefik-public-https.middlewares=admin-auth
            # Define the port inside of the Docker service to use
            - traefik.http.services.traefik-public.loadbalancer.server.port=8080
        volumes:
          # Add Docker as a mounted volume, so that Traefik can read the labels of other services
          - /var/run/docker.sock:/var/run/docker.sock:ro
          # Mount the volume to store the certificates
          - traefik-public-certificates:/certificates
        command:
          # - --api.insecure=true
          # Enable Docker in Traefik, so that it reads labels from Docker services
          - --providers.docker
          # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
          - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
          # Do not expose all Docker services, only the ones explicitly exposed
          - --providers.docker.exposedbydefault=false
          # Enable Docker Swarm mode
          - --providers.docker.swarmmode
          # Create an entrypoint "web" listening on port 80
          - --entrypoints.web.address=:80
          # Create an entrypoint "websecured" listening on port 443
          # - --entrypoints.websecure.address=:443
          # For Dev  and avoid acme limit api
          # - --certificatesResolvers.le.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
          # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
          # - --certificatesresolvers.le.acme.email=${EMAIL? Email Variable is not set}
          # Store the Let's Encrypt certificates in the mounted volume
          # - --certificatesresolvers.le.acme.storage=/certificates/acme.json
          # Use the TLS Challenge for Let's Encrypt
          # - --certificatesresolvers.le.acme.httpchallenge=true
          # - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
          # Enable the access log, with HTTP requests
          - --accesslog
          # Enable the Traefik log, for configurations and errors
          - --log
          # Enable the Dashboard and API
          - --api
        networks:
          # Use the public network created to be shared between Traefik and
          # any other service that needs to be publicly available with HTTPS
          - traefik-public

    mysql:
        image: mysql
        cap_add:
          - SYS_NICE
        environment:
            MYSQL_ROOT_USERNAME: ${USERNAME}
            MYSQL_ROOT_PASSWORD: ${PASSWORD}
            MYSQL_DATABASE: ${DB}
        ports: 
          - 3306:3306
        deploy:
          placement:
            constraints:
              - node.role == manager
        # volumes:
        #     - ./mysql:/var/lib/mysql
        networks:
            - booking
    api:
        build: ./api
        image: 172.16.233.97:5000/api
        restart: always
        environment: 
            APP_MODULE: booking.main:app
        deploy:
          placement:
            constraints:
              - node.role == manager
          labels:
            - traefik.enable=true
            - traefik.constraint-label=traefik-public
            - traefik.http.routers.${STACK_NAME?Variable not set}-http.entrypoints=web
            - traefik.http.routers.${STACK_NAME?Variable not set}-http.rule=Host(`api.${DOMAIN?Variable not set}`)
            # - "traefik.http.routers.${STACK_NAME?Variable not set}-http.middlewares=${STACK_NAME?Variable not set}-https-redirect"
            # - "traefik.http.routers.${STACK_NAME?Variable not set}-https.entrypoints=websecure"
            # - "traefik.http.routers.${STACK_NAME?Variable not set}-https.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)"
            # - "traefik.http.routers.${STACK_NAME?Variable not set}-https.tls=true"
            # - "traefik.http.routers.${STACK_NAME?Variable not set}-https.tls.certresolver=le"
            # - "traefik.http.routers.${STACK_NAME?Variable not set}-https.service=api"
            - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
            - traefik.docker.network=traefik-public

        networks:
            - traefik-public
            - booking
volumes: 
    mysql:
    traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
  booking:
    external: false